{"version":3,"sources":["../../src/register-boilerplate-blocks.ts"],"names":["registerBoilerplateBlocks","MTBlockEditor","blockTypes","blocks","forEach","block","panelBlockTypes","Array","from","shortcutBlockTypes","addableBlockTypes","post","concat","typeId","panel","shortcut","reverse","b","ids","key","conf","index","indexOf","splice","registerBlockType","createBoilerplateBlock","Object","assign","window","scriptElm","document","querySelector","import","meta","url","dataset","JSON","parse"],"mappings":"OAsBM,SAAUA,0BACdC,EACAC,EACAC,GAEAA,EAAOC,QAASC,IACd,MAAMC,EAAkBC,MAAMC,KAAKN,GAC7BO,EAAqBF,MAAMC,KAAKN,IAErCG,EAAMK,kBAAkBC,MAAQ,IAC9BC,OAAO,CAAEC,OAAQR,EAAMQ,OAAQC,OAAO,EAAOC,UAAU,IACvDC,UACAZ,QAASa,IACR,CACE,CACEC,IAAKZ,EACLa,IAAK,SAEP,CACED,IAAKT,EACLU,IAAK,aAEPf,QAASgB,IACT,MAAMC,EAAQD,EAAKF,IAAII,QAAQL,EAAEJ,QACjC,IAAe,IAAXQ,EACF,OAGF,MAAMR,EAASO,EAAKF,IAAIK,OAAOF,EAAO,GAAG,GAErCJ,EAAEG,EAAKD,MAETC,EAAKF,IAAIK,OAAO,EAAG,EAAGV,OAK9BZ,EAAcuB,kBACZvB,EAAcwB,uBACZC,OAAOC,OAAOtB,EAAO,CAAEC,gBAAAA,EAAiBG,mBAAAA,QAMhD,MAAMR,cAAgB2B,OAAO3B,cACvB4B,UAAYC,SAASC,cACzB,gBAAgBC,OAAOC,KAAKC,wCAExBhC,WAAa2B,WAAaA,UAAUM,QAAQjC,WAC5CC,OAAS0B,WAAaA,UAAUM,QAAQhC,OAC1CF,eAAiBE,QAAUD,YAC7BF,0BACEC,cACAmC,KAAKC,MAAMnC,YACXkC,KAAKC,MAAMlC","sourcesContent":["import type { EditorUtil, BoilerplateBlockOptions } from \"./mt-block-editor\";\n\ndeclare global {\n  interface ImportMeta {\n    url: string;\n  }\n}\n\ninterface AddableBlockType {\n  typeId: string;\n  panel: boolean;\n  shortcut: boolean;\n}\n\ninterface AddableBlockTypesMap {\n  [key: string]: AddableBlockType[];\n}\n\ninterface BlockOptions extends BoilerplateBlockOptions {\n  addableBlockTypes: AddableBlockTypesMap;\n}\n\nexport function registerBoilerplateBlocks(\n  MTBlockEditor: typeof EditorUtil,\n  blockTypes: string[],\n  blocks: BlockOptions[]\n): void {\n  blocks.forEach((block) => {\n    const panelBlockTypes = Array.from(blockTypes);\n    const shortcutBlockTypes = Array.from(blockTypes);\n\n    (block.addableBlockTypes.post || [])\n      .concat({ typeId: block.typeId, panel: false, shortcut: false })\n      .reverse()\n      .forEach((b) => {\n        [\n          {\n            ids: panelBlockTypes,\n            key: \"panel\" as keyof AddableBlockType,\n          },\n          {\n            ids: shortcutBlockTypes,\n            key: \"shortcut\" as keyof AddableBlockType,\n          },\n        ].forEach((conf: { ids: string[]; key: keyof AddableBlockType }) => {\n          const index = conf.ids.indexOf(b.typeId);\n          if (index === -1) {\n            return;\n          }\n\n          const typeId = conf.ids.splice(index, 1)[0];\n\n          if (b[conf.key]) {\n            // add to head if enabled\n            conf.ids.splice(0, 0, typeId);\n          }\n        });\n      });\n\n    MTBlockEditor.registerBlockType(\n      MTBlockEditor.createBoilerplateBlock(\n        Object.assign(block, { panelBlockTypes, shortcutBlockTypes })\n      )\n    );\n  });\n}\n\nconst MTBlockEditor = window.MTBlockEditor;\nconst scriptElm = document.querySelector(\n  `script[src^=\"${import.meta.url}\"][data-block-types][data-blocks]`\n) as HTMLScriptElement;\nconst blockTypes = scriptElm && scriptElm.dataset.blockTypes;\nconst blocks = scriptElm && scriptElm.dataset.blocks;\nif (MTBlockEditor && blocks && blockTypes) {\n  registerBoilerplateBlocks(\n    MTBlockEditor,\n    JSON.parse(blockTypes) as string[],\n    JSON.parse(blocks) as BlockOptions[]\n  );\n}\n"]}