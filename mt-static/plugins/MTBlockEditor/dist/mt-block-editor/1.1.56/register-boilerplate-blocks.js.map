{"version":3,"names":["registerBoilerplateBlocks","MTBlockEditor","blockTypes","blocks","forEach","block","panelBlockTypes","Array","from","shortcutBlockTypes","addableBlockTypes","post","common","concat","typeId","panel","shortcut","reverse","index","indexOf","splice","unshift","registerBlockType","createBoilerplateBlock","Object","assign","window","scriptElm","elm","document","querySelector","src","startsWith","url","dataset","JSON","parse"],"sources":["../../src/register-boilerplate-blocks.ts"],"sourcesContent":["import type { EditorUtil, BoilerplateBlockOptions } from \"./mt-block-editor\";\n\ndeclare global {\n  interface ImportMeta {\n    url: string;\n  }\n}\n\ninterface AddableBlockType {\n  typeId: string;\n  panel: boolean;\n  shortcut: boolean;\n}\n\ninterface AddableBlockTypesMap {\n  [key: string]: AddableBlockType[];\n}\n\ninterface BlockOptions extends BoilerplateBlockOptions {\n  addableBlockTypes: AddableBlockTypesMap;\n}\n\nexport function registerBoilerplateBlocks(\n  MTBlockEditor: typeof EditorUtil,\n  blockTypes: string[],\n  blocks: BlockOptions[]\n): void {\n  blocks.forEach((block) => {\n    const panelBlockTypes = Array.from(blockTypes); // display all by default\n    const shortcutBlockTypes: string[] = []; // display nothing by default\n\n    (block.addableBlockTypes.post || block.addableBlockTypes.common || [])\n      .concat({ typeId: block.typeId, panel: false, shortcut: false })\n      .reverse()\n      .forEach(({ typeId, panel, shortcut }) => {\n        const index = panelBlockTypes.indexOf(typeId);\n        if (index === -1) {\n          // unkown typeId\n          return;\n        }\n\n        panelBlockTypes.splice(index, 1);\n        if (panel) {\n          panelBlockTypes.unshift(typeId);\n        }\n\n        if (shortcut) {\n          shortcutBlockTypes.unshift(typeId);\n        }\n      });\n\n    MTBlockEditor.registerBlockType(\n      MTBlockEditor.createBoilerplateBlock(\n        Object.assign(block, { panelBlockTypes, shortcutBlockTypes })\n      )\n    );\n  });\n}\n\nconst MTBlockEditor = window.MTBlockEditor;\nconst scriptElm = (() => {\n  const elm = document.querySelector(\n    `script[data-block-types][data-blocks]`\n  ) as HTMLScriptElement | null;\n  return elm && elm.src.startsWith(import.meta.url) ? elm : null;\n})();\nconst blockTypes = scriptElm && scriptElm.dataset.blockTypes;\nconst blocks = scriptElm && scriptElm.dataset.blocks;\nif (MTBlockEditor && blocks && blockTypes) {\n  registerBoilerplateBlocks(\n    MTBlockEditor,\n    JSON.parse(blockTypes) as string[],\n    JSON.parse(blocks) as BlockOptions[]\n  );\n}\n"],"mappings":"OAsBM,SAAUA,0BACdC,EACAC,EACAC,GAEAA,EAAOC,SAASC,IACd,MAAMC,EAAkBC,MAAMC,KAAKN,GAC7BO,EAA+B,IAEpCJ,EAAMK,kBAAkBC,MAAQN,EAAMK,kBAAkBE,QAAU,IAChEC,OAAO,CAAEC,OAAQT,EAAMS,OAAQC,OAAO,EAAOC,UAAU,IACvDC,UACAb,SAAQ,EAAGU,SAAQC,QAAOC,eACzB,MAAME,EAAQZ,EAAgBa,QAAQL,IACvB,IAAXI,IAKJZ,EAAgBc,OAAOF,EAAO,GAC1BH,GACFT,EAAgBe,QAAQP,GAGtBE,GACFP,EAAmBY,QAAQP,GAC7B,IAGJb,EAAcqB,kBACZrB,EAAcsB,uBACZC,OAAOC,OAAOpB,EAAO,CAAEC,kBAAiBG,wBAE3C,GAEL,CAEA,MAAMR,cAAgByB,OAAOzB,cACvB0B,UAAY,MAChB,MAAMC,EAAMC,SAASC,cACnB,yCAEF,OAAOF,GAAOA,EAAIG,IAAIC,uBAAuBC,KAAOL,EAAM,IAC3D,EALiB,GAMZ1B,WAAayB,WAAaA,UAAUO,QAAQhC,WAC5CC,OAASwB,WAAaA,UAAUO,QAAQ/B,OAC1CF,eAAiBE,QAAUD,YAC7BF,0BACEC,cACAkC,KAAKC,MAAMlC,YACXiC,KAAKC,MAAMjC","ignoreList":[]}